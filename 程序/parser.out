Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER SEMICOLON block DOT
Rule 2     block -> BEGIN statement_list END
Rule 3     statement_list -> statement
Rule 4     statement_list -> statement_list COMMA statement
Rule 5     statement -> IDENTIFIER ASSIGN expression
Rule 6     expression -> expression PLUS term
Rule 7     expression -> expression MINUS term
Rule 8     expression -> term
Rule 9     term -> term TIMES factor
Rule 10    term -> term DIVIDE factor
Rule 11    term -> factor
Rule 12    factor -> factor POW factor
Rule 13    factor -> LPAREN expression RPAREN
Rule 14    factor -> NUMBER
Rule 15    factor -> REAL
Rule 16    factor -> IDENTIFIER

Terminals, with rules where they appear

ASSIGN               : 5
BEGIN                : 2
COMMA                : 4
DIVIDE               : 10
DOT                  : 1
END                  : 2
IDENTIFIER           : 1 5 16
LPAREN               : 13
MINUS                : 7
NUMBER               : 14
PLUS                 : 6
POW                  : 12
PROGRAM              : 1
REAL                 : 15
RPAREN               : 13
SEMICOLON            : 1
TIMES                : 9
error                : 

Nonterminals, with rules where they appear

block                : 1
expression           : 5 6 7 13
factor               : 9 10 11 12 12
program              : 0
statement            : 3 4
statement_list       : 2 4
term                 : 6 7 8 9 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER SEMICOLON block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER SEMICOLON block DOT

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . SEMICOLON block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM IDENTIFIER SEMICOLON . block DOT
    (2) block -> . BEGIN statement_list END

    BEGIN           shift and go to state 6

    block                          shift and go to state 5

state 5

    (1) program -> PROGRAM IDENTIFIER SEMICOLON block . DOT

    DOT             shift and go to state 7


state 6

    (2) block -> BEGIN . statement_list END
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list COMMA statement
    (5) statement -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 10

    statement_list                 shift and go to state 8
    statement                      shift and go to state 9

state 7

    (1) program -> PROGRAM IDENTIFIER SEMICOLON block DOT .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER SEMICOLON block DOT .)


state 8

    (2) block -> BEGIN statement_list . END
    (4) statement_list -> statement_list . COMMA statement

    END             shift and go to state 11
    COMMA           shift and go to state 12


state 9

    (3) statement_list -> statement .

    END             reduce using rule 3 (statement_list -> statement .)
    COMMA           reduce using rule 3 (statement_list -> statement .)


state 10

    (5) statement -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 13


state 11

    (2) block -> BEGIN statement_list END .

    DOT             reduce using rule 2 (block -> BEGIN statement_list END .)


state 12

    (4) statement_list -> statement_list COMMA . statement
    (5) statement -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 10

    statement                      shift and go to state 14

state 13

    (5) statement -> IDENTIFIER ASSIGN . expression
    (6) expression -> . expression PLUS term
    (7) expression -> . expression MINUS term
    (8) expression -> . term
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . factor POW factor
    (13) factor -> . LPAREN expression RPAREN
    (14) factor -> . NUMBER
    (15) factor -> . REAL
    (16) factor -> . IDENTIFIER

    LPAREN          shift and go to state 19
    NUMBER          shift and go to state 20
    REAL            shift and go to state 21
    IDENTIFIER      shift and go to state 15

    expression                     shift and go to state 16
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 14

    (4) statement_list -> statement_list COMMA statement .

    END             reduce using rule 4 (statement_list -> statement_list COMMA statement .)
    COMMA           reduce using rule 4 (statement_list -> statement_list COMMA statement .)


state 15

    (16) factor -> IDENTIFIER .

    POW             reduce using rule 16 (factor -> IDENTIFIER .)
    TIMES           reduce using rule 16 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 16 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 16 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 16 (factor -> IDENTIFIER .)
    END             reduce using rule 16 (factor -> IDENTIFIER .)
    COMMA           reduce using rule 16 (factor -> IDENTIFIER .)
    RPAREN          reduce using rule 16 (factor -> IDENTIFIER .)


state 16

    (5) statement -> IDENTIFIER ASSIGN expression .
    (6) expression -> expression . PLUS term
    (7) expression -> expression . MINUS term

    END             reduce using rule 5 (statement -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 5 (statement -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 17

    (8) expression -> term .
    (9) term -> term . TIMES factor
    (10) term -> term . DIVIDE factor

    PLUS            reduce using rule 8 (expression -> term .)
    MINUS           reduce using rule 8 (expression -> term .)
    END             reduce using rule 8 (expression -> term .)
    COMMA           reduce using rule 8 (expression -> term .)
    RPAREN          reduce using rule 8 (expression -> term .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25


state 18

    (11) term -> factor .
    (12) factor -> factor . POW factor

    TIMES           reduce using rule 11 (term -> factor .)
    DIVIDE          reduce using rule 11 (term -> factor .)
    PLUS            reduce using rule 11 (term -> factor .)
    MINUS           reduce using rule 11 (term -> factor .)
    END             reduce using rule 11 (term -> factor .)
    COMMA           reduce using rule 11 (term -> factor .)
    RPAREN          reduce using rule 11 (term -> factor .)
    POW             shift and go to state 26


state 19

    (13) factor -> LPAREN . expression RPAREN
    (6) expression -> . expression PLUS term
    (7) expression -> . expression MINUS term
    (8) expression -> . term
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . factor POW factor
    (13) factor -> . LPAREN expression RPAREN
    (14) factor -> . NUMBER
    (15) factor -> . REAL
    (16) factor -> . IDENTIFIER

    LPAREN          shift and go to state 19
    NUMBER          shift and go to state 20
    REAL            shift and go to state 21
    IDENTIFIER      shift and go to state 15

    expression                     shift and go to state 27
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 20

    (14) factor -> NUMBER .

    POW             reduce using rule 14 (factor -> NUMBER .)
    TIMES           reduce using rule 14 (factor -> NUMBER .)
    DIVIDE          reduce using rule 14 (factor -> NUMBER .)
    PLUS            reduce using rule 14 (factor -> NUMBER .)
    MINUS           reduce using rule 14 (factor -> NUMBER .)
    END             reduce using rule 14 (factor -> NUMBER .)
    COMMA           reduce using rule 14 (factor -> NUMBER .)
    RPAREN          reduce using rule 14 (factor -> NUMBER .)


state 21

    (15) factor -> REAL .

    POW             reduce using rule 15 (factor -> REAL .)
    TIMES           reduce using rule 15 (factor -> REAL .)
    DIVIDE          reduce using rule 15 (factor -> REAL .)
    PLUS            reduce using rule 15 (factor -> REAL .)
    MINUS           reduce using rule 15 (factor -> REAL .)
    END             reduce using rule 15 (factor -> REAL .)
    COMMA           reduce using rule 15 (factor -> REAL .)
    RPAREN          reduce using rule 15 (factor -> REAL .)


state 22

    (6) expression -> expression PLUS . term
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . factor POW factor
    (13) factor -> . LPAREN expression RPAREN
    (14) factor -> . NUMBER
    (15) factor -> . REAL
    (16) factor -> . IDENTIFIER

    LPAREN          shift and go to state 19
    NUMBER          shift and go to state 20
    REAL            shift and go to state 21
    IDENTIFIER      shift and go to state 15

    term                           shift and go to state 28
    factor                         shift and go to state 18

state 23

    (7) expression -> expression MINUS . term
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . factor POW factor
    (13) factor -> . LPAREN expression RPAREN
    (14) factor -> . NUMBER
    (15) factor -> . REAL
    (16) factor -> . IDENTIFIER

    LPAREN          shift and go to state 19
    NUMBER          shift and go to state 20
    REAL            shift and go to state 21
    IDENTIFIER      shift and go to state 15

    term                           shift and go to state 29
    factor                         shift and go to state 18

state 24

    (9) term -> term TIMES . factor
    (12) factor -> . factor POW factor
    (13) factor -> . LPAREN expression RPAREN
    (14) factor -> . NUMBER
    (15) factor -> . REAL
    (16) factor -> . IDENTIFIER

    LPAREN          shift and go to state 19
    NUMBER          shift and go to state 20
    REAL            shift and go to state 21
    IDENTIFIER      shift and go to state 15

    factor                         shift and go to state 30

state 25

    (10) term -> term DIVIDE . factor
    (12) factor -> . factor POW factor
    (13) factor -> . LPAREN expression RPAREN
    (14) factor -> . NUMBER
    (15) factor -> . REAL
    (16) factor -> . IDENTIFIER

    LPAREN          shift and go to state 19
    NUMBER          shift and go to state 20
    REAL            shift and go to state 21
    IDENTIFIER      shift and go to state 15

    factor                         shift and go to state 31

state 26

    (12) factor -> factor POW . factor
    (12) factor -> . factor POW factor
    (13) factor -> . LPAREN expression RPAREN
    (14) factor -> . NUMBER
    (15) factor -> . REAL
    (16) factor -> . IDENTIFIER

    LPAREN          shift and go to state 19
    NUMBER          shift and go to state 20
    REAL            shift and go to state 21
    IDENTIFIER      shift and go to state 15

    factor                         shift and go to state 32

state 27

    (13) factor -> LPAREN expression . RPAREN
    (6) expression -> expression . PLUS term
    (7) expression -> expression . MINUS term

    RPAREN          shift and go to state 33
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 28

    (6) expression -> expression PLUS term .
    (9) term -> term . TIMES factor
    (10) term -> term . DIVIDE factor

    PLUS            reduce using rule 6 (expression -> expression PLUS term .)
    MINUS           reduce using rule 6 (expression -> expression PLUS term .)
    END             reduce using rule 6 (expression -> expression PLUS term .)
    COMMA           reduce using rule 6 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 6 (expression -> expression PLUS term .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25


state 29

    (7) expression -> expression MINUS term .
    (9) term -> term . TIMES factor
    (10) term -> term . DIVIDE factor

    PLUS            reduce using rule 7 (expression -> expression MINUS term .)
    MINUS           reduce using rule 7 (expression -> expression MINUS term .)
    END             reduce using rule 7 (expression -> expression MINUS term .)
    COMMA           reduce using rule 7 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 7 (expression -> expression MINUS term .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25


state 30

    (9) term -> term TIMES factor .
    (12) factor -> factor . POW factor

    TIMES           reduce using rule 9 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 9 (term -> term TIMES factor .)
    PLUS            reduce using rule 9 (term -> term TIMES factor .)
    MINUS           reduce using rule 9 (term -> term TIMES factor .)
    END             reduce using rule 9 (term -> term TIMES factor .)
    COMMA           reduce using rule 9 (term -> term TIMES factor .)
    RPAREN          reduce using rule 9 (term -> term TIMES factor .)
    POW             shift and go to state 26


state 31

    (10) term -> term DIVIDE factor .
    (12) factor -> factor . POW factor

    TIMES           reduce using rule 10 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 10 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 10 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 10 (term -> term DIVIDE factor .)
    END             reduce using rule 10 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 10 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 10 (term -> term DIVIDE factor .)
    POW             shift and go to state 26


state 32

    (12) factor -> factor POW factor .
    (12) factor -> factor . POW factor

  ! shift/reduce conflict for POW resolved as shift
    TIMES           reduce using rule 12 (factor -> factor POW factor .)
    DIVIDE          reduce using rule 12 (factor -> factor POW factor .)
    PLUS            reduce using rule 12 (factor -> factor POW factor .)
    MINUS           reduce using rule 12 (factor -> factor POW factor .)
    END             reduce using rule 12 (factor -> factor POW factor .)
    COMMA           reduce using rule 12 (factor -> factor POW factor .)
    RPAREN          reduce using rule 12 (factor -> factor POW factor .)
    POW             shift and go to state 26

  ! POW             [ reduce using rule 12 (factor -> factor POW factor .) ]


state 33

    (13) factor -> LPAREN expression RPAREN .

    POW             reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 13 (factor -> LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for POW in state 32 resolved as shift
